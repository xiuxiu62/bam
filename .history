#V2
test
machine f { input -> x }
machine Main {    let hello = "Hello, BAM!";    hello{1} -> Print}
null -> Main
machine Fib {\n    input_check, input_rec1, input_rec2 = input -> dup3;\n\n    input_check, 1 -> Le\n        ? 1\n        : (input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib) -> Add\n}\n5 -> Fib
machine Fib {\n    input_check, input_rec1, input_rec2 = input -> dup3;\n\n    input_check, 1 -> Le\n        ? 1\n        : (input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib) -> Add\n}
machine Fib {\n    input_check, input_rec1, input_rec2 = input -> dup3;\n\n    input_check, 1 -> Le\n        ? 1\n        : (input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib) -> Add\n}\n
\nmachine Fib {\n    let input_check, input_rec1, input_rec2 = input -> dup3;\n\n    input_check, 1 -> Le\n        ? 1\n        : (input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib) -> Add\n}\n\n\n
\nmachine Fib {\n    let input_check, input_rec1, input_rec2 = input -> dup3;\n\n    (input_check, 1 -> Le)\n        ? 1\n        : (input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib) -> Add\n}\n\n\n
machine Fib {\n    let input_check, input_rec1, input_rec2 = input -> dup3;\n\n    (input_check, 1 -> Le)\n        ? 1\n        : ((input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib)) -> Add\n}\n
\nmachine Fib {\n    let input_check, input_rec1, input_rec2 = input -> Dup3;\n\n    (input_check, 2 -> Lt)\n        ? 1\n        : ((input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib)) -> Add\n}\n\n\n
\nmachine Fib {\n    let input_check, input_rec1, input_rec2 = input -> Dup3;\n\n    (input_check, 2 -> Le)\n        ? 1\n        : ((input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib)) -> Add\n}\n\n\n
\nmachine Fib {\n    let input_check, input_rec1, input_rec2 = input -> Dup3;\n\n    (input_check, 2 -> Lt)\n        ? 1\n        : ((input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib)) -> Add\n}\n\n\n
\nmachine Fib {\n    let input_check, input_rec1, input_rec2 = input -> Dup3;\n\n    (input_check, 2 -> Le)\n        ? 1\n        : ((input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib)) -> Add\n}\n\n\n
\nmachine Fib {\n    let input_check, input_rec1, input_rec2 = input -> Dup3;\n\n    (input_check, 2 -> Lt)\n        ? 1\n        : ((input_rec1, 1 -> Sub -> Fib), (input_rec2, 2 -> Sub -> Fib)) -> Add\n}\n\n\n
10 -> Fib
3 -> Fact
10 -> Fib
machine add() {"hello" -> Print}
machine Fact {    letD:zzd:d
